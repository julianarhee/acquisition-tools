#!/usr/bin/env python2
import time
# from psychopy import visual, event, core, monitors, logging, tools
import numpy as np
import multiprocessing as mp
import threading
from Queue import Queue
import sys
import errno
import os
import optparse
from datetime import datetime
from serial import Serial

#DEFINE MWORKS FUNCTIONS
# MW for server side conduit:
sys.path.append('/Library/Application Support/MWorks/Scripting/Python')
from mworks.conduit import IPCClientConduit

def flushBuffer():
    #Flush out serial buffer
    global ser
    tmp=0;
    while tmp is not '':
        tmp=ser.read()

def cbRespond(event):
    global conduit
    enterT = time.clock()

    if event.data == 'ping':
        conduit.send_data(conduit.reverse_codec['messageVar'], 'response')

        print 'Elapsed in cbRespond: %5.3f ms' \
            % (1000*(time.clock() - enterT))
        sys.stdout.flush()


def send_pyresponse(event):
    global conduit
    global queued
    enterT = time.clock()


    if event.value == "start":
        print "Mworks started"
        conduit.send_data(conduit.reverse_codec['pyresponse'], "reading")
        queued = 1
    elif event.value == "notrunning":
        print "Mworks not running"
        queued = 0

    sys.stdout.flush()


def check_mw_display(event):
    global reading
    #global conduit
    #enterT = time.clock()
    if event.data == 1:
        #conduit.send_data(conduit.reverse_codec['messageVar'], 'response')
        #print 'Starting, time is %5.3f' % time.clock()
        reading = 1

    elif event.data == 0:
        #print 'MW display is not running'
        reading = 0

    sys.stdout.flush()


def handle_state_mode(event):
    global stopflag
    stopflag.append(event.value)
    return stopflag


parser = optparse.OptionParser()
parser.add_option('--output-path', action="store", dest="output_path", default="/tmp/serial", help="out path directory [default: /tmp/serial]")

(options, args) = parser.parse_args()
output_path = options.output_path


# --------------------------------------------------------------
# MW STUFF: WAIT FOR SIGNAL THAT EXPERIMENT DISPLAY IS RUNNING
# ---------------------------------------------------------------
resource_name = 'server_conduit'
global conduit
global queued
global reading
global stopflag

conduit = IPCClientConduit(resource_name)
conduit.initialize()
#reading = 0
#queued = 0
reading = 0
queued = 0
stopflag = []

conduit.register_callback_for_name('pyresponse', send_pyresponse)
conduit.register_callback_for_name('displaying', check_mw_display)
conduit.register_callback_for_name('stop_it', handle_state_mode)

"Connected to MW..."
print "Queued: ", queued
print "Displaying: ", reading

print "STARTING"
#ser.write('S')#TRIGGER
print "GOT CALL FROM MW"
print "Queued: ", queued

#queued = 1

nt = 0
strt = time.time()
while queued == 0:
    if (nt % 1E6) == 0:
        print "Waiting for MW. Time elapsed: %5.3f s" % (time.time()-strt)
    nt += 1

while not (1 in stopflag):
    print "Running.."

print('FINISHED!')